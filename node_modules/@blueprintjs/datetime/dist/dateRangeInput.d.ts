/// <reference types="react" />
import * as moment from "moment";
import { AbstractComponent, IInputGroupProps, IProps } from "@blueprintjs/core";
import { DateRange, DateRangeBoundary } from "./common/dateUtils";
import { IDatePickerBaseProps } from "./datePickerCore";
export interface IDateRangeInputProps extends IDatePickerBaseProps, IProps {
    /**
     * Whether the calendar popover should close when a date range is fully selected.
     * @default true
     */
    closeOnSelection?: boolean;
    /**
     * The default date range to be used in the component when uncontrolled.
     * This will be ignored if `value` is set.
     */
    defaultValue?: DateRange;
    /**
     * Whether the text inputs are non-interactive.
     * @default false
     */
    disabled?: boolean;
    /**
     * Props to pass to the end-date input.
     */
    endInputProps?: IInputGroupProps;
    /**
     * The format of each date in the date range. See options
     * here: http://momentjs.com/docs/#/displaying/format/
     * @default "YYYY-MM-DD"
     */
    format?: string;
    /**
     * The error message to display when the selected date is invalid.
     * @default "Invalid date"
     */
    invalidDateMessage?: string;
    /**
     * Called when the user selects a day.
     * If no days are selected, it will pass `[null, null]`.
     * If a start date is selected but not an end date, it will pass `[selectedDate, null]`.
     * If both a start and end date are selected, it will pass `[startDate, endDate]`.
     */
    onChange?: (selectedRange: DateRange) => void;
    /**
     * Called when the user finishes typing in a new date and the date causes an error state.
     * If the date is invalid, `new Date(undefined)` will be returned for the corresponding
     * boundary of the date range.
     * If the date is out of range, the out-of-range date will be returned for the corresponding
     * boundary of the date range (`onChange` is not called in this case).
     */
    onError?: (errorRange: DateRange) => void;
    /**
     * The error message to display when the date selected is out of range.
     * @default "Out of range"
     */
    outOfRangeMessage?: string;
    /**
     * The error message to display when the selected dates overlap.
     * This can only happen when typing dates in the input field.
     * @default "Overlapping dates"
     */
    overlappingDatesMessage?: string;
    /**
     * Props to pass to the start-date input.
     */
    startInputProps?: IInputGroupProps;
    /**
     * The currently selected date range.
     * If this prop is present, the component acts in a controlled manner.
     * To display no date range in the input fields, pass `[null, null]` to the value prop.
     * To display an invalid date error in either input field, pass `new Date(undefined)`
     * for the appropriate date in the value prop.
     */
    value?: DateRange;
}
export interface IDateRangeInputState {
    isOpen?: boolean;
    boundaryToModify?: DateRangeBoundary;
    lastFocusedField?: DateRangeBoundary;
    isStartInputFocused?: boolean;
    isEndInputFocused?: boolean;
    startInputString?: string;
    endInputString?: string;
    startHoverString?: string;
    endHoverString?: string;
    selectedEnd?: moment.Moment;
    selectedStart?: moment.Moment;
    wasLastFocusChangeDueToHover?: boolean;
}
export declare class DateRangeInput extends AbstractComponent<IDateRangeInputProps, IDateRangeInputState> {
    static defaultProps: IDateRangeInputProps;
    displayName: string;
    private startInputRef;
    private endInputRef;
    private refHandlers;
    constructor(props: IDateRangeInputProps, context?: any);
    componentDidUpdate(): void;
    render(): JSX.Element;
    componentWillReceiveProps(nextProps: IDateRangeInputProps): void;
    private handleDateRangePickerChange;
    private handleDateRangePickerHoverChange;
    private handleInputKeyDown;
    private handleInputMouseDown;
    private handleInputClick;
    private handleStartInputFocus;
    private handleEndInputFocus;
    private handleInputFocus;
    private handleStartInputBlur;
    private handleEndInputBlur;
    private handleInputBlur;
    private handleStartInputChange;
    private handleEndInputChange;
    private handleInputChange;
    private handlePopoverClose;
    private shouldFocusInputRef(isFocused, inputRef);
    private dateStringToMoment;
    private getInitialRange;
    private getSelectedRange;
    private getInputDisplayString;
    private getFormattedDateString;
    private getStateKeysAndValuesForBoundary;
    private getDateRangeForCallback;
    private getDateForCallback;
    private getOtherBoundary;
    private areSameDay;
    private doBoundaryDatesOverlap;
    /**
     * Returns true if the provided boundary is an END boundary overlapping the
     * selected start date. (If the boundaries overlap, we consider the END
     * boundary to be erroneous.)
     */
    private doesEndBoundaryOverlapStartBoundary;
    private isControlled;
    private isInputEmpty;
    private isInputInErrorState;
    private isMomentValidAndInRange;
    private isMomentInRange;
    private isNextDateRangeValid(nextMomentDate, boundary);
}
